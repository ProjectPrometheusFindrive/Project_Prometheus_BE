name: Deploy to Google Cloud Run

on:
    push:
        branches:
            - main

env:
    PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    GAR_LOCATION: asia-northeast3
    SERVICE: ppfdbe
    REPOSITORY: ppfdbe
    # Optional repo variables (Settings -> Variables) for non-secret config
    DB_NAME: ${{ vars.DB_NAME }}
    APP_ENV: ${{ vars.ENV }}
    # Optional runtime service account email for Cloud Run
    RUNTIME_SA: ${{ vars.RUNTIME_SA }}
    # Also expose to Cloud SDK default project if any tool reads it
    CLOUDSDK_CORE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}

jobs:
    deploy:
        name: Build and Deploy
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Google Auth
              id: auth
              uses: "google-github-actions/auth@v1"
              with:
                  credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

            - name: Set up Cloud SDK
              uses: "google-github-actions/setup-gcloud@v1"

            - name: Configure Docker
              run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

            - name: Preflight - validate PROJECT_ID and auth
              run: |-
                  set -euo pipefail
                  PID="${{ env.PROJECT_ID }}"
                  if [ -z "$PID" ]; then
                    echo "PROJECT_ID is empty. Set secrets.GCP_PROJECT_ID to a valid Project ID (e.g., my-project-12345)." >&2
                    exit 1
                  fi
                  if printf '%s' "$PID" | grep -qE '[[:space:]]'; then
                    echo "PROJECT_ID contains whitespace. Use the Project ID, not the human-readable Project Name." >&2
                    exit 1
                  fi
                  if printf '%s' "$PID" | grep -qE '[A-Z]'; then
                    echo "PROJECT_ID contains uppercase letters. Project IDs are lowercase with hyphens." >&2
                    exit 1
                  fi
                  if ! printf '%s' "$PID" | grep -Eq '^[a-z][a-z0-9-]{4,28}[a-z0-9]$|^[0-9]{6,}$'; then
                    echo "PROJECT_ID does not look like a valid Project ID or Project Number." >&2
                    exit 1
                  fi
                  echo "Active account: $(gcloud auth list --filter=status:ACTIVE --format='value(account)')"

            - name: Ensure Secret Manager has MONGODB_URI (optional grant)
              run: |-
                  set -euo pipefail
                  # Create secret if it doesn't exist, then always add a new version
                  echo -n "${{ secrets.MONGODB_URI }}" | gcloud secrets create MONGODB_URI \
                    --project "${{ env.PROJECT_ID }}" \
                    --replication-policy=automatic \
                    --data-file=- \
                  || echo "(info) Skipping creation: MONGODB_URI may already exist or Project/perm error; proceeding to add version."
                  echo -n "${{ secrets.MONGODB_URI }}" | gcloud secrets versions add MONGODB_URI \
                    --project "${{ env.PROJECT_ID }}" \
                    --data-file=-
                  # Optionally grant a specified runtime service account access to the secret
                  if [ -n "${RUNTIME_SA:-}" ]; then
                    echo "Granting Secret Manager access to ${RUNTIME_SA}"
                    gcloud projects add-iam-policy-binding "${{ env.PROJECT_ID }}" \
                      --member "serviceAccount:${RUNTIME_SA}" \
                      --role roles/secretmanager.secretAccessor \
                      --quiet
                  else
                    echo "RUNTIME_SA not set; skipping IAM grant. Ensure your Cloud Run service account has roles/secretmanager.secretAccessor."
                  fi

            - name: Build and Push Container
              run: |-
                  IMAGE_TAG=$(echo "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" | tr '[:upper:]' '[:lower:]')
                  docker build -t ${IMAGE_TAG} .
                  docker push ${IMAGE_TAG}

            - name: Deploy to Cloud Run
              id: deploy
              run: |-
                  IMAGE_TAG=$(echo "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" | tr '[:upper:]' '[:lower:]')
                  SA_FLAG=""
                  if [ -n "${RUNTIME_SA:-}" ]; then
                    SA_FLAG="--service-account ${RUNTIME_SA}"
                  fi
                  gcloud run deploy ${{ env.SERVICE }} \
                    --image ${IMAGE_TAG} \
                    --platform managed \
                    --region ${{ env.GAR_LOCATION }} \
                    --project ${{ env.PROJECT_ID }} \
                    --allow-unauthenticated \
                    --set-secrets MONGODB_URI=MONGODB_URI:latest \
                    --set-env-vars DB_NAME=${DB_NAME:-PPFDDB},ENV=${APP_ENV:-production} \
                    ${SA_FLAG}
